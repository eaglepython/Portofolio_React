name: Build and Deploy Portfolio

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  VITE_APP_TITLE: 'Joseph Bidias - Quantitative Researcher & Software Engineer'
  VITE_APP_URL: 'https://josephbidias.dev'

jobs:
  # Code Quality Checks
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Type check (if using TypeScript)
      run: npm run type-check
      continue-on-error: true

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/
        retention-days: 7

  # Test Build (Lighthouse CI)
  test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-files
        path: dist/
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Run Lighthouse CI
      run: |
        lhci autorun --upload.target=temporary-public-storage
      continue-on-error: true

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level high
      continue-on-error: true

  # Deploy to Netlify (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://josephbidias.dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-files
        path: dist/
        
    - name: Deploy to Netlify
      uses: netlify/actions/cli@master
      with:
        args: deploy --prod --dir=dist --message="Production deployment from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        
    - name: Comment deployment URL
      uses: actions/github-script@v6
      if: github.event_name == 'push'
      with:
        script: |
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: 'üöÄ Successfully deployed to production: https://josephbidias.dev'
          })

  # Deploy Preview (Pull Requests)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [lint, build]
    if: github.event_name == 'pull_request'
    environment:
      name: preview
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-files
        path: dist/
        
    - name: Deploy preview to Netlify
      uses: netlify/actions/cli@master
      id: netlify-deploy
      with:
        args: deploy --dir=dist --message="Preview deployment for PR #${{ github.event.number }}"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        
    - name: Comment preview URL
      uses: actions/github-script@v6
      with:
        script: |
          const deployUrl = '${{ steps.netlify-deploy.outputs.NETLIFY_URL }}';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üîç **Preview Deployment Ready!**
            
            üìã **Build Summary:**
            - ‚úÖ Lint: Passed
            - ‚úÖ Build: Successful
            - üîó Preview URL: ${deployUrl}
            
            üß™ **Test the preview:**
            - Check responsive design
            - Verify all animations work
            - Test contact form functionality
            - Validate performance metrics
            
            This preview will be available until the PR is merged or closed.`
          })

  # Dependency Updates (Scheduled)
  dependency-update:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Update dependencies
      run: |
        npm update
        npm audit fix --force
        
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'Automated Dependency Updates'
        body: |
          üîÑ **Automated Dependency Update**
          
          This PR contains automated dependency updates.
          
          **Changes:**
          - Updated npm packages to latest versions
          - Applied security fixes where available
          
          **Review Checklist:**
          - [ ] Build passes
          - [ ] No breaking changes
          - [ ] Security vulnerabilities addressed
          
          Auto-generated by GitHub Actions.
        branch: chore/dependency-updates
        delete-branch: true

# Cleanup old workflow runs
  cleanup:
    name: Cleanup Old Runs
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Delete old workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 30
        keep_minimum_runs: 10